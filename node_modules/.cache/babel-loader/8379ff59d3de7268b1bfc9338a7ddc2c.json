{"ast":null,"code":"import _objectSpread from\"C:/Users/Asus/Desktop/FACULTATE/AN 3/React Angular/proiect-fe2/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"C:/Users/Asus/Desktop/FACULTATE/AN 3/React Angular/proiect-fe2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from\"react\";import{prjFirestore}from\"../firebase/configfirebase\";export var useCollection=function useCollection(collection,_query,_orderBy){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),documents=_useState2[0],setDocuments=_useState2[1];var _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),error=_useState4[0],setError=_useState4[1];var query=useRef(_query).current;var orderBy=useRef(_orderBy).current;useEffect(function(){var ref=prjFirestore.collection(collection).where(query[0],query[1],query[2]).orderBy(orderBy[0],orderBy[1]);//do a where to get the transaction list for a specific uid\n//and an order\n//if (orderBy) {\n//   ref = ref.orderBy(orderBy[0], orderBy)\n// }\nvar unsubscribe=ref.onSnapshot(function(snapshot){var results=[];snapshot.docs.forEach(function(doc){results.push(_objectSpread(_objectSpread({},doc.data()),{},{id:doc.id}));});// update state\nsetDocuments(results);setError(null);},function(error){console.log(error);setError('Ai gresit ceva gogule...');});// unsubscribe on unmount\nreturn function(){return unsubscribe();};},[collection,query,orderBy]);return{documents:documents,error:error};};","map":{"version":3,"sources":["C:/Users/Asus/Desktop/FACULTATE/AN 3/React Angular/proiect-fe2/src/hooks/useCollection.tsx"],"names":["useEffect","useState","useRef","prjFirestore","useCollection","collection","_query","_orderBy","documents","setDocuments","error","setError","query","current","orderBy","ref","where","unsubscribe","onSnapshot","snapshot","results","docs","forEach","doc","push","data","id","console","log"],"mappings":"iSAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CACA,OAASC,YAAT,KAA6B,4BAA7B,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,UAAD,CAAkBC,MAAlB,CAA+BC,QAA/B,CAAiD,CAC1E,cAAkCN,QAAQ,CAAC,IAAD,CAA1C,wCAAOO,SAAP,eAAkBC,YAAlB,eACA,eAA0BR,QAAQ,CAAC,IAAD,CAAlC,yCAAOS,KAAP,eAAcC,QAAd,eACA,GAAMC,CAAAA,KAAK,CAAGV,MAAM,CAACI,MAAD,CAAN,CAAeO,OAA7B,CACA,GAAMC,CAAAA,OAAO,CAAGZ,MAAM,CAACK,QAAD,CAAN,CAAiBM,OAAjC,CAEAb,SAAS,CAAC,UAAM,CACZ,GAAIe,CAAAA,GAAG,CAAGZ,YAAY,CAACE,UAAb,CAAwBA,UAAxB,EAAoCW,KAApC,CAA0CJ,KAAK,CAAC,CAAD,CAA/C,CAAoDA,KAAK,CAAC,CAAD,CAAzD,CAA8DA,KAAK,CAAC,CAAD,CAAnE,EAAwEE,OAAxE,CAAgFA,OAAO,CAAC,CAAD,CAAvF,CAA4FA,OAAO,CAAC,CAAD,CAAnG,CAAV,CACA;AACA;AAEA;AACC;AACA;AAED,GAAMG,CAAAA,WAAW,CAAGF,GAAG,CAACG,UAAJ,CAAe,SAAAC,QAAQ,CAAI,CAC/C,GAAIC,CAAAA,OAAyB,CAAG,EAAhC,CACAD,QAAQ,CAACE,IAAT,CAAcC,OAAd,CAAsB,SAAAC,GAAG,CAAI,CACzBH,OAAO,CAACI,IAAR,gCAAiBD,GAAG,CAACE,IAAJ,EAAjB,MAA6BC,EAAE,CAAEH,GAAG,CAACG,EAArC,IACH,CAFD,EAIA;AACAjB,YAAY,CAACW,OAAD,CAAZ,CACAT,QAAQ,CAAC,IAAD,CAAR,CACC,CATmB,CASjB,SAAAD,KAAK,CAAI,CACZiB,OAAO,CAACC,GAAR,CAAYlB,KAAZ,EACAC,QAAQ,CAAC,0BAAD,CAAR,CACC,CAZmB,CAApB,CAcA;AACA,MAAO,kBAAMM,CAAAA,WAAW,EAAjB,EAAP,CAEH,CA1BQ,CA0BN,CAACZ,UAAD,CAAaO,KAAb,CAAoBE,OAApB,CA1BM,CAAT,CA4BA,MAAO,CAAEN,SAAS,CAATA,SAAF,CAAaE,KAAK,CAALA,KAAb,CAAP,CACH,CAnCM","sourcesContent":["import { useEffect, useState, useRef } from \"react\"\r\nimport { prjFirestore } from \"../firebase/configfirebase\"\r\n\r\nexport const useCollection = (collection: any, _query: any, _orderBy: any) => {\r\n    const [documents, setDocuments] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const query = useRef(_query).current\r\n    const orderBy = useRef(_orderBy).current\r\n\r\n    useEffect(() => {\r\n        let ref = prjFirestore.collection(collection).where(query[0], query[1], query[2]).orderBy(orderBy[0], orderBy[1])\r\n        //do a where to get the transaction list for a specific uid\r\n        //and an order\r\n\r\n        //if (orderBy) {\r\n         //   ref = ref.orderBy(orderBy[0], orderBy)\r\n         // }\r\n\r\n        const unsubscribe = ref.onSnapshot(snapshot => {\r\n        let results: { id: string }[] = []\r\n        snapshot.docs.forEach(doc => {\r\n            results.push({...doc.data(), id: doc.id})\r\n        });\r\n        \r\n        // update state\r\n        setDocuments(results)\r\n        setError(null)\r\n        }, error => {\r\n        console.log(error)\r\n        setError('Ai gresit ceva gogule...')\r\n        })\r\n\r\n        // unsubscribe on unmount\r\n        return () => unsubscribe()\r\n\r\n    }, [collection, query, orderBy])\r\n\r\n    return { documents, error }\r\n}"]},"metadata":{},"sourceType":"module"}