{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer, useEffect, useState } from \"react\";\nimport { prjFirestore, timestamp } from '../firebase/configfirebase';\nlet initialState = {\n  document: null,\n  isPending: false,\n  error: null,\n  success: null\n};\n\nconst firestoreReducer = (state, action) => {\n  switch (action.type) {\n    case \"IS_PENDING\":\n      return {\n        success: false,\n        isPending: true,\n        error: null,\n        document: null\n      };\n\n    case \"ADDED_DOCUMENT\":\n      return {\n        success: true,\n        isPending: false,\n        error: null,\n        document: action.payload\n      };\n\n    case 'DELETED_DOCUMENT':\n      return {\n        isPending: false,\n        document: null,\n        success: true,\n        error: null\n      };\n\n    case 'ERROR':\n      return {\n        isPending: false,\n        document: null,\n        success: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const useFirestore = collection => {\n  _s();\n\n  const [response, dispatch] = useReducer(firestoreReducer, initialState);\n  const [isCancelled, setIsCancelled] = useState(false); // collection ref\n\n  const ref = prjFirestore.collection(collection);\n\n  const dispatchIfNotCancelled = action => {\n    if (!isCancelled) {\n      dispatch(action);\n    }\n  }; // add a document\n\n\n  const addDocument = async doc => {\n    dispatch({\n      type: \"IS_PENDING\"\n    });\n\n    try {\n      const createdAt = timestamp.fromDate(new Date());\n      const addedDocument = await ref.add({ ...doc,\n        createdAt\n      });\n      dispatchIfNotCancelled({\n        type: \"ADDED_DOCUMENT\",\n        payload: addedDocument\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: \"ERROR\",\n        payload: err.message\n      });\n    }\n  }; // delete a document\n\n\n  const deleteDocument = async id => {\n    dispatch({\n      type: 'IS_PENDING'\n    });\n\n    try {\n      await ref.doc(id).delete();\n      dispatchIfNotCancelled({\n        type: 'DELETED_DOCUMENT'\n      });\n    } catch (err) {\n      dispatchIfNotCancelled({\n        type: 'ERROR',\n        payload: 'could not delete'\n      });\n    }\n  };\n\n  useEffect(() => {\n    return () => setIsCancelled(true);\n  }, []);\n  return {\n    addDocument,\n    deleteDocument,\n    response\n  };\n};\n\n_s(useFirestore, \"9EVgiqay/R51d/Adc6OMNoHTwUQ=\");","map":{"version":3,"sources":["C:/Users/Asus/Desktop/FACULTATE/AN 3/React Angular/proiect-fe2/src/hooks/useFirestore.tsx"],"names":["useReducer","useEffect","useState","prjFirestore","timestamp","initialState","document","isPending","error","success","firestoreReducer","state","action","type","payload","useFirestore","collection","response","dispatch","isCancelled","setIsCancelled","ref","dispatchIfNotCancelled","addDocument","doc","createdAt","fromDate","Date","addedDocument","add","err","message","deleteDocument","id","delete"],"mappings":"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","sourcesContent":["import { useReducer, useEffect, useState } from \"react\"\r\nimport { prjFirestore, timestamp } from '../firebase/configfirebase' \r\n\r\nlet initialState = {\r\n  document: null as null,\r\n  isPending: false,\r\n  error: null as null,\r\n  success: null as null,\r\n}\r\n\r\nconst firestoreReducer = (state: any, action: any) => {\r\n  switch (action.type) {\r\n    case \"IS_PENDING\":\r\n      return {success: false, isPending: true, error: null, document: null}\r\n    case \"ADDED_DOCUMENT\":\r\n      return {success: true, isPending: false, error: null, document: action.payload}\r\n    case 'DELETED_DOCUMENT':\r\n      return { isPending: false, document: null, success: true, error: null }\r\n    case 'ERROR':\r\n      return { isPending: false, document: null, success: false, error: action.payload }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport const useFirestore = (collection: any) => {\r\n  const [response, dispatch] = useReducer(firestoreReducer, initialState)\r\n  const [isCancelled, setIsCancelled] = useState(false)\r\n\r\n  // collection ref\r\n  const ref = prjFirestore.collection(collection)\r\n  \r\n  const dispatchIfNotCancelled = (action: any) => {\r\n    if (!isCancelled) {\r\n      dispatch(action)\r\n    }\r\n  }\r\n\r\n  // add a document\r\n  const addDocument = async (doc: any) => {\r\n    dispatch({ type: \"IS_PENDING\" })\r\n\r\n    try {\r\n      const createdAt = timestamp.fromDate(new Date())\r\n      const addedDocument = await ref.add({...doc, createdAt})\r\n      dispatchIfNotCancelled({ type: \"ADDED_DOCUMENT\", payload: addedDocument })\r\n    }\r\n    catch (err) {\r\n      dispatchIfNotCancelled({ type: \"ERROR\", payload: err.message })\r\n    }\r\n\r\n  }\r\n\r\n  // delete a document\r\n  const deleteDocument = async (id: any) => {\r\n    dispatch({ type: 'IS_PENDING' })\r\n\r\n    try {\r\n      await ref.doc(id).delete()\r\n      dispatchIfNotCancelled({ type: 'DELETED_DOCUMENT' })\r\n    }\r\n    catch (err) {\r\n      dispatchIfNotCancelled({ type: 'ERROR', payload: 'could not delete' })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    return () => setIsCancelled(true)\r\n  }, [])\r\n\r\n  return { addDocument, deleteDocument, response }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}